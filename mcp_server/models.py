# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:19:57+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AnyLengthString(RootModel[str]):
    root: str


class AttributeName(Enum):
    SIGN = 'SIGN'
    SYMPTOM = 'SYMPTOM'
    DIAGNOSIS = 'DIAGNOSIS'
    NEGATION = 'NEGATION'
    PERTAINS_TO_FAMILY = 'PERTAINS_TO_FAMILY'
    HYPOTHETICAL = 'HYPOTHETICAL'
    LOW_CONFIDENCE = 'LOW_CONFIDENCE'
    PAST_HISTORY = 'PAST_HISTORY'
    FUTURE = 'FUTURE'


class BoundedLengthString(RootModel[constr(min_length=1, max_length=20000)]):
    root: constr(min_length=1, max_length=20000)


class ClientRequestTokenString(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)


class DetectEntitiesRequest(BaseModel):
    Text: BoundedLengthString


class DetectEntitiesV2Request(BaseModel):
    Text: BoundedLengthString


class DetectPHIRequest(BaseModel):
    Text: BoundedLengthString


class EntitySubType(Enum):
    NAME = 'NAME'
    DX_NAME = 'DX_NAME'
    DOSAGE = 'DOSAGE'
    ROUTE_OR_MODE = 'ROUTE_OR_MODE'
    FORM = 'FORM'
    FREQUENCY = 'FREQUENCY'
    DURATION = 'DURATION'
    GENERIC_NAME = 'GENERIC_NAME'
    BRAND_NAME = 'BRAND_NAME'
    STRENGTH = 'STRENGTH'
    RATE = 'RATE'
    ACUITY = 'ACUITY'
    TEST_NAME = 'TEST_NAME'
    TEST_VALUE = 'TEST_VALUE'
    TEST_UNITS = 'TEST_UNITS'
    TEST_UNIT = 'TEST_UNIT'
    PROCEDURE_NAME = 'PROCEDURE_NAME'
    TREATMENT_NAME = 'TREATMENT_NAME'
    DATE = 'DATE'
    AGE = 'AGE'
    CONTACT_POINT = 'CONTACT_POINT'
    PHONE_OR_FAX = 'PHONE_OR_FAX'
    EMAIL = 'EMAIL'
    IDENTIFIER = 'IDENTIFIER'
    ID = 'ID'
    URL = 'URL'
    ADDRESS = 'ADDRESS'
    PROFESSION = 'PROFESSION'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'
    DIRECTION = 'DIRECTION'
    QUALITY = 'QUALITY'
    QUANTITY = 'QUANTITY'
    TIME_EXPRESSION = 'TIME_EXPRESSION'
    TIME_TO_MEDICATION_NAME = 'TIME_TO_MEDICATION_NAME'
    TIME_TO_DX_NAME = 'TIME_TO_DX_NAME'
    TIME_TO_TEST_NAME = 'TIME_TO_TEST_NAME'
    TIME_TO_PROCEDURE_NAME = 'TIME_TO_PROCEDURE_NAME'
    TIME_TO_TREATMENT_NAME = 'TIME_TO_TREATMENT_NAME'
    AMOUNT = 'AMOUNT'
    GENDER = 'GENDER'
    RACE_ETHNICITY = 'RACE_ETHNICITY'
    ALLERGIES = 'ALLERGIES'
    TOBACCO_USE = 'TOBACCO_USE'
    ALCOHOL_CONSUMPTION = 'ALCOHOL_CONSUMPTION'
    REC_DRUG_USE = 'REC_DRUG_USE'


class EntityType(Enum):
    MEDICATION = 'MEDICATION'
    MEDICAL_CONDITION = 'MEDICAL_CONDITION'
    PROTECTED_HEALTH_INFORMATION = 'PROTECTED_HEALTH_INFORMATION'
    TEST_TREATMENT_PROCEDURE = 'TEST_TREATMENT_PROCEDURE'
    ANATOMY = 'ANATOMY'
    TIME_EXPRESSION = 'TIME_EXPRESSION'
    BEHAVIORAL_ENVIRONMENTAL_SOCIAL = 'BEHAVIORAL_ENVIRONMENTAL_SOCIAL'


class Float(RootModel[float]):
    root: float


class ICD10CMAttributeType(Enum):
    ACUITY = 'ACUITY'
    DIRECTION = 'DIRECTION'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'
    QUALITY = 'QUALITY'
    QUANTITY = 'QUANTITY'
    TIME_TO_DX_NAME = 'TIME_TO_DX_NAME'
    TIME_EXPRESSION = 'TIME_EXPRESSION'


class ICD10CMEntityCategory(Enum):
    MEDICAL_CONDITION = 'MEDICAL_CONDITION'


class ICD10CMEntityType(Enum):
    DX_NAME = 'DX_NAME'
    TIME_EXPRESSION = 'TIME_EXPRESSION'


class ICD10CMRelationshipType(Enum):
    OVERLAP = 'OVERLAP'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'


class ICD10CMTraitName(Enum):
    NEGATION = 'NEGATION'
    DIAGNOSIS = 'DIAGNOSIS'
    SIGN = 'SIGN'
    SYMPTOM = 'SYMPTOM'
    PERTAINS_TO_FAMILY = 'PERTAINS_TO_FAMILY'
    HYPOTHETICAL = 'HYPOTHETICAL'
    LOW_CONFIDENCE = 'LOW_CONFIDENCE'


class IamRoleArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
        min_length=20,
        max_length=2048,
    )


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class InvalidEncodingException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class JobId(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32
    )


class JobName(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
    )


class JobStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    FAILED = 'FAILED'
    STOP_REQUESTED = 'STOP_REQUESTED'
    STOPPED = 'STOPPED'


class KMSKey(RootModel[constr(pattern=r'.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'.*', min_length=1, max_length=2048)


class LanguageCode(Enum):
    en = 'en'


class ManifestFilePath(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class MaxResultsInteger(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class ModelVersion(RootModel[str]):
    root: str


class OntologyLinkingBoundedLengthString(
    RootModel[constr(min_length=1, max_length=10000)]
):
    root: constr(min_length=1, max_length=10000)


class RelationshipType(Enum):
    EVERY = 'EVERY'
    WITH_DOSAGE = 'WITH_DOSAGE'
    ADMINISTERED_VIA = 'ADMINISTERED_VIA'
    FOR = 'FOR'
    NEGATIVE = 'NEGATIVE'
    OVERLAP = 'OVERLAP'
    DOSAGE = 'DOSAGE'
    ROUTE_OR_MODE = 'ROUTE_OR_MODE'
    FORM = 'FORM'
    FREQUENCY = 'FREQUENCY'
    DURATION = 'DURATION'
    STRENGTH = 'STRENGTH'
    RATE = 'RATE'
    ACUITY = 'ACUITY'
    TEST_VALUE = 'TEST_VALUE'
    TEST_UNITS = 'TEST_UNITS'
    TEST_UNIT = 'TEST_UNIT'
    DIRECTION = 'DIRECTION'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'
    AMOUNT = 'AMOUNT'


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RxNormAttributeType(Enum):
    DOSAGE = 'DOSAGE'
    DURATION = 'DURATION'
    FORM = 'FORM'
    FREQUENCY = 'FREQUENCY'
    RATE = 'RATE'
    ROUTE_OR_MODE = 'ROUTE_OR_MODE'
    STRENGTH = 'STRENGTH'


class RxNormEntityCategory(Enum):
    MEDICATION = 'MEDICATION'


class RxNormEntityType(Enum):
    BRAND_NAME = 'BRAND_NAME'
    GENERIC_NAME = 'GENERIC_NAME'


class RxNormTraitName(Enum):
    NEGATION = 'NEGATION'


class S3Bucket(
    RootModel[constr(pattern=r'^[0-9a-z\.\-_]*(?!\.)$', min_length=3, max_length=63)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^[0-9a-z\.\-_]*(?!\.)$', min_length=3, max_length=63)


class S3Key(RootModel[constr(pattern=r'.*', max_length=1024)]):
    root: constr(pattern=r'.*', max_length=1024)


class SNOMEDCTAttributeType(Enum):
    ACUITY = 'ACUITY'
    QUALITY = 'QUALITY'
    DIRECTION = 'DIRECTION'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'
    TEST_VALUE = 'TEST_VALUE'
    TEST_UNIT = 'TEST_UNIT'


class SNOMEDCTEntityCategory(Enum):
    MEDICAL_CONDITION = 'MEDICAL_CONDITION'
    ANATOMY = 'ANATOMY'
    TEST_TREATMENT_PROCEDURE = 'TEST_TREATMENT_PROCEDURE'


class SNOMEDCTEntityType(Enum):
    DX_NAME = 'DX_NAME'
    TEST_NAME = 'TEST_NAME'
    PROCEDURE_NAME = 'PROCEDURE_NAME'
    TREATMENT_NAME = 'TREATMENT_NAME'


class SNOMEDCTRelationshipType(Enum):
    ACUITY = 'ACUITY'
    QUALITY = 'QUALITY'
    TEST_VALUE = 'TEST_VALUE'
    TEST_UNITS = 'TEST_UNITS'
    DIRECTION = 'DIRECTION'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'


class SNOMEDCTTraitName(Enum):
    NEGATION = 'NEGATION'
    DIAGNOSIS = 'DIAGNOSIS'
    SIGN = 'SIGN'
    SYMPTOM = 'SYMPTOM'
    PERTAINS_TO_FAMILY = 'PERTAINS_TO_FAMILY'
    HYPOTHETICAL = 'HYPOTHETICAL'
    LOW_CONFIDENCE = 'LOW_CONFIDENCE'
    PAST_HISTORY = 'PAST_HISTORY'
    FUTURE = 'FUTURE'


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class StartEntitiesDetectionV2JobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartICD10CMInferenceJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartPHIDetectionJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartRxNormInferenceJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartSNOMEDCTInferenceJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StopEntitiesDetectionV2JobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopEntitiesDetectionV2JobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StopICD10CMInferenceJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopICD10CMInferenceJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StopPHIDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopPHIDetectionJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StopRxNormInferenceJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopRxNormInferenceJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StopSNOMEDCTInferenceJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopSNOMEDCTInferenceJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class String(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class TextSizeLimitExceededException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class TooManyRequestsException(RootModel[Any]):
    root: Any


class Trait(BaseModel):
    Name: Optional[AttributeName] = None
    Score: Optional[Float] = None


class TraitList(RootModel[List[Trait]]):
    root: List[Trait]


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    ComprehendMedical_20181030_DescribeEntitiesDetectionV2Job = (
        'ComprehendMedical_20181030.DescribeEntitiesDetectionV2Job'
    )


class XAmzTarget1(Enum):
    ComprehendMedical_20181030_DescribeICD10CMInferenceJob = (
        'ComprehendMedical_20181030.DescribeICD10CMInferenceJob'
    )


class XAmzTarget2(Enum):
    ComprehendMedical_20181030_DescribePHIDetectionJob = (
        'ComprehendMedical_20181030.DescribePHIDetectionJob'
    )


class XAmzTarget3(Enum):
    ComprehendMedical_20181030_DescribeRxNormInferenceJob = (
        'ComprehendMedical_20181030.DescribeRxNormInferenceJob'
    )


class XAmzTarget4(Enum):
    ComprehendMedical_20181030_DescribeSNOMEDCTInferenceJob = (
        'ComprehendMedical_20181030.DescribeSNOMEDCTInferenceJob'
    )


class XAmzTarget5(Enum):
    ComprehendMedical_20181030_DetectEntities = (
        'ComprehendMedical_20181030.DetectEntities'
    )


class XAmzTarget6(Enum):
    ComprehendMedical_20181030_DetectEntitiesV2 = (
        'ComprehendMedical_20181030.DetectEntitiesV2'
    )


class XAmzTarget7(Enum):
    ComprehendMedical_20181030_DetectPHI = 'ComprehendMedical_20181030.DetectPHI'


class XAmzTarget8(Enum):
    ComprehendMedical_20181030_InferICD10CM = 'ComprehendMedical_20181030.InferICD10CM'


class XAmzTarget9(Enum):
    ComprehendMedical_20181030_InferRxNorm = 'ComprehendMedical_20181030.InferRxNorm'


class XAmzTarget10(Enum):
    ComprehendMedical_20181030_InferSNOMEDCT = (
        'ComprehendMedical_20181030.InferSNOMEDCT'
    )


class XAmzTarget11(Enum):
    ComprehendMedical_20181030_ListEntitiesDetectionV2Jobs = (
        'ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs'
    )


class XAmzTarget12(Enum):
    ComprehendMedical_20181030_ListICD10CMInferenceJobs = (
        'ComprehendMedical_20181030.ListICD10CMInferenceJobs'
    )


class XAmzTarget13(Enum):
    ComprehendMedical_20181030_ListPHIDetectionJobs = (
        'ComprehendMedical_20181030.ListPHIDetectionJobs'
    )


class XAmzTarget14(Enum):
    ComprehendMedical_20181030_ListRxNormInferenceJobs = (
        'ComprehendMedical_20181030.ListRxNormInferenceJobs'
    )


class XAmzTarget15(Enum):
    ComprehendMedical_20181030_ListSNOMEDCTInferenceJobs = (
        'ComprehendMedical_20181030.ListSNOMEDCTInferenceJobs'
    )


class XAmzTarget16(Enum):
    ComprehendMedical_20181030_StartEntitiesDetectionV2Job = (
        'ComprehendMedical_20181030.StartEntitiesDetectionV2Job'
    )


class XAmzTarget17(Enum):
    ComprehendMedical_20181030_StartICD10CMInferenceJob = (
        'ComprehendMedical_20181030.StartICD10CMInferenceJob'
    )


class XAmzTarget18(Enum):
    ComprehendMedical_20181030_StartPHIDetectionJob = (
        'ComprehendMedical_20181030.StartPHIDetectionJob'
    )


class XAmzTarget19(Enum):
    ComprehendMedical_20181030_StartRxNormInferenceJob = (
        'ComprehendMedical_20181030.StartRxNormInferenceJob'
    )


class XAmzTarget20(Enum):
    ComprehendMedical_20181030_StartSNOMEDCTInferenceJob = (
        'ComprehendMedical_20181030.StartSNOMEDCTInferenceJob'
    )


class XAmzTarget21(Enum):
    ComprehendMedical_20181030_StopEntitiesDetectionV2Job = (
        'ComprehendMedical_20181030.StopEntitiesDetectionV2Job'
    )


class XAmzTarget22(Enum):
    ComprehendMedical_20181030_StopICD10CMInferenceJob = (
        'ComprehendMedical_20181030.StopICD10CMInferenceJob'
    )


class XAmzTarget23(Enum):
    ComprehendMedical_20181030_StopPHIDetectionJob = (
        'ComprehendMedical_20181030.StopPHIDetectionJob'
    )


class XAmzTarget24(Enum):
    ComprehendMedical_20181030_StopRxNormInferenceJob = (
        'ComprehendMedical_20181030.StopRxNormInferenceJob'
    )


class XAmzTarget25(Enum):
    ComprehendMedical_20181030_StopSNOMEDCTInferenceJob = (
        'ComprehendMedical_20181030.StopSNOMEDCTInferenceJob'
    )


class Attribute(BaseModel):
    BeginOffset: Optional[Integer] = None
    Category: Optional[EntityType] = None
    EndOffset: Optional[Integer] = None
    Id: Optional[Integer] = None
    RelationshipScore: Optional[Float] = None
    RelationshipType_1: Optional[RelationshipType] = Field(
        None, alias='RelationshipType'
    )
    Score: Optional[Float] = None
    Text: Optional[String] = None
    Traits: Optional[TraitList] = None
    Type: Optional[EntitySubType] = None


class AttributeList(RootModel[List[Attribute]]):
    root: List[Attribute]


class Characters(BaseModel):
    OriginalTextCharacters: Optional[Integer] = None


class ComprehendMedicalAsyncJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class DescribeEntitiesDetectionV2JobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeICD10CMInferenceJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribePHIDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeRxNormInferenceJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeSNOMEDCTInferenceJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class Entity(BaseModel):
    Attributes: Optional[AttributeList] = None
    BeginOffset: Optional[Integer] = None
    Category: Optional[EntityType] = None
    EndOffset: Optional[Integer] = None
    Id: Optional[Integer] = None
    Score: Optional[Float] = None
    Text: Optional[String] = None
    Traits: Optional[TraitList] = None
    Type: Optional[EntitySubType] = None


class EntityList(RootModel[List[Entity]]):
    root: List[Entity]


class ICD10CMConcept(BaseModel):
    Code: Optional[String] = None
    Description: Optional[String] = None
    Score: Optional[Float] = None


class ICD10CMConceptList(RootModel[List[ICD10CMConcept]]):
    root: List[ICD10CMConcept]


class ICD10CMTrait(BaseModel):
    Name: Optional[ICD10CMTraitName] = None
    Score: Optional[Float] = None


class ICD10CMTraitList(RootModel[List[ICD10CMTrait]]):
    root: List[ICD10CMTrait]


class InferICD10CMRequest(BaseModel):
    Text: OntologyLinkingBoundedLengthString


class InferRxNormRequest(BaseModel):
    Text: OntologyLinkingBoundedLengthString


class InferSNOMEDCTRequest(BaseModel):
    Text: OntologyLinkingBoundedLengthString


class InputDataConfig(BaseModel):
    S3Bucket_1: S3Bucket = Field(..., alias='S3Bucket')
    S3Key_1: Optional[S3Key] = Field(None, alias='S3Key')


class ListEntitiesDetectionV2JobsRequest(BaseModel):
    Filter: Optional[ComprehendMedicalAsyncJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListICD10CMInferenceJobsRequest(BaseModel):
    Filter: Optional[ComprehendMedicalAsyncJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListPHIDetectionJobsRequest(BaseModel):
    Filter: Optional[ComprehendMedicalAsyncJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListRxNormInferenceJobsRequest(BaseModel):
    Filter: Optional[ComprehendMedicalAsyncJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListSNOMEDCTInferenceJobsRequest(BaseModel):
    Filter: Optional[ComprehendMedicalAsyncJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class OutputDataConfig(BaseModel):
    S3Bucket_1: S3Bucket = Field(..., alias='S3Bucket')
    S3Key_1: Optional[S3Key] = Field(None, alias='S3Key')


class RxNormConcept(BaseModel):
    Code: Optional[String] = None
    Description: Optional[String] = None
    Score: Optional[Float] = None


class RxNormConceptList(RootModel[List[RxNormConcept]]):
    root: List[RxNormConcept]


class RxNormTrait(BaseModel):
    Name: Optional[RxNormTraitName] = None
    Score: Optional[Float] = None


class RxNormTraitList(RootModel[List[RxNormTrait]]):
    root: List[RxNormTrait]


class SNOMEDCTConcept(BaseModel):
    Code: Optional[String] = None
    Description: Optional[String] = None
    Score: Optional[Float] = None


class SNOMEDCTConceptList(RootModel[List[SNOMEDCTConcept]]):
    root: List[SNOMEDCTConcept]


class SNOMEDCTDetails(BaseModel):
    Edition: Optional[String] = None
    Language: Optional[String] = None
    VersionDate: Optional[String] = None


class SNOMEDCTTrait(BaseModel):
    Name: Optional[SNOMEDCTTraitName] = None
    Score: Optional[Float] = None


class SNOMEDCTTraitList(RootModel[List[SNOMEDCTTrait]]):
    root: List[SNOMEDCTTrait]


class StartEntitiesDetectionV2JobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')


class StartICD10CMInferenceJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')


class StartPHIDetectionJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')


class StartRxNormInferenceJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')


class StartSNOMEDCTInferenceJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')


class UnmappedAttribute(BaseModel):
    Attribute_1: Optional[Attribute] = Field(None, alias='Attribute')
    Type: Optional[EntityType] = None


class UnmappedAttributeList(RootModel[List[UnmappedAttribute]]):
    root: List[UnmappedAttribute]


class ComprehendMedicalAsyncJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    ExpirationTime: Optional[Timestamp] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    ManifestFilePath_1: Optional[ManifestFilePath] = Field(
        None, alias='ManifestFilePath'
    )
    Message: Optional[AnyLengthString] = None
    ModelVersion_1: Optional[ModelVersion] = Field(None, alias='ModelVersion')
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    SubmitTime: Optional[Timestamp] = None


class ComprehendMedicalAsyncJobPropertiesList(
    RootModel[List[ComprehendMedicalAsyncJobProperties]]
):
    root: List[ComprehendMedicalAsyncJobProperties]


class DescribeEntitiesDetectionV2JobResponse(BaseModel):
    ComprehendMedicalAsyncJobProperties_1: Optional[
        ComprehendMedicalAsyncJobProperties
    ] = Field(None, alias='ComprehendMedicalAsyncJobProperties')


class DescribeICD10CMInferenceJobResponse(BaseModel):
    ComprehendMedicalAsyncJobProperties_1: Optional[
        ComprehendMedicalAsyncJobProperties
    ] = Field(None, alias='ComprehendMedicalAsyncJobProperties')


class DescribePHIDetectionJobResponse(BaseModel):
    ComprehendMedicalAsyncJobProperties_1: Optional[
        ComprehendMedicalAsyncJobProperties
    ] = Field(None, alias='ComprehendMedicalAsyncJobProperties')


class DescribeRxNormInferenceJobResponse(BaseModel):
    ComprehendMedicalAsyncJobProperties_1: Optional[
        ComprehendMedicalAsyncJobProperties
    ] = Field(None, alias='ComprehendMedicalAsyncJobProperties')


class DescribeSNOMEDCTInferenceJobResponse(BaseModel):
    ComprehendMedicalAsyncJobProperties_1: Optional[
        ComprehendMedicalAsyncJobProperties
    ] = Field(None, alias='ComprehendMedicalAsyncJobProperties')


class DetectEntitiesResponse(BaseModel):
    Entities: EntityList
    ModelVersion: String
    PaginationToken: Optional[String] = None
    UnmappedAttributes: Optional[UnmappedAttributeList] = None


class DetectEntitiesV2Response(BaseModel):
    Entities: EntityList
    ModelVersion: String
    PaginationToken: Optional[String] = None
    UnmappedAttributes: Optional[UnmappedAttributeList] = None


class DetectPHIResponse(BaseModel):
    Entities: EntityList
    ModelVersion: String
    PaginationToken: Optional[String] = None


class ICD10CMAttribute(BaseModel):
    BeginOffset: Optional[Integer] = None
    Category: Optional[ICD10CMEntityType] = None
    EndOffset: Optional[Integer] = None
    Id: Optional[Integer] = None
    RelationshipScore: Optional[Float] = None
    RelationshipType: Optional[ICD10CMRelationshipType] = None
    Score: Optional[Float] = None
    Text: Optional[String] = None
    Traits: Optional[ICD10CMTraitList] = None
    Type: Optional[ICD10CMAttributeType] = None


class ICD10CMAttributeList(RootModel[List[ICD10CMAttribute]]):
    root: List[ICD10CMAttribute]


class ICD10CMEntity(BaseModel):
    Attributes: Optional[ICD10CMAttributeList] = None
    BeginOffset: Optional[Integer] = None
    Category: Optional[ICD10CMEntityCategory] = None
    EndOffset: Optional[Integer] = None
    ICD10CMConcepts: Optional[ICD10CMConceptList] = None
    Id: Optional[Integer] = None
    Score: Optional[Float] = None
    Text: Optional[OntologyLinkingBoundedLengthString] = None
    Traits: Optional[ICD10CMTraitList] = None
    Type: Optional[ICD10CMEntityType] = None


class ICD10CMEntityList(RootModel[List[ICD10CMEntity]]):
    root: List[ICD10CMEntity]


class InferICD10CMResponse(BaseModel):
    Entities: ICD10CMEntityList
    ModelVersion: Optional[String] = None
    PaginationToken: Optional[String] = None


class ListEntitiesDetectionV2JobsResponse(BaseModel):
    ComprehendMedicalAsyncJobPropertiesList_1: Optional[
        ComprehendMedicalAsyncJobPropertiesList
    ] = Field(None, alias='ComprehendMedicalAsyncJobPropertiesList')
    NextToken: Optional[String] = None


class ListICD10CMInferenceJobsResponse(BaseModel):
    ComprehendMedicalAsyncJobPropertiesList_1: Optional[
        ComprehendMedicalAsyncJobPropertiesList
    ] = Field(None, alias='ComprehendMedicalAsyncJobPropertiesList')
    NextToken: Optional[String] = None


class ListPHIDetectionJobsResponse(BaseModel):
    ComprehendMedicalAsyncJobPropertiesList_1: Optional[
        ComprehendMedicalAsyncJobPropertiesList
    ] = Field(None, alias='ComprehendMedicalAsyncJobPropertiesList')
    NextToken: Optional[String] = None


class ListRxNormInferenceJobsResponse(BaseModel):
    ComprehendMedicalAsyncJobPropertiesList_1: Optional[
        ComprehendMedicalAsyncJobPropertiesList
    ] = Field(None, alias='ComprehendMedicalAsyncJobPropertiesList')
    NextToken: Optional[String] = None


class ListSNOMEDCTInferenceJobsResponse(BaseModel):
    ComprehendMedicalAsyncJobPropertiesList_1: Optional[
        ComprehendMedicalAsyncJobPropertiesList
    ] = Field(None, alias='ComprehendMedicalAsyncJobPropertiesList')
    NextToken: Optional[String] = None


class RxNormAttribute(BaseModel):
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    Id: Optional[Integer] = None
    RelationshipScore: Optional[Float] = None
    Score: Optional[Float] = None
    Text: Optional[String] = None
    Traits: Optional[RxNormTraitList] = None
    Type: Optional[RxNormAttributeType] = None


class RxNormAttributeList(RootModel[List[RxNormAttribute]]):
    root: List[RxNormAttribute]


class RxNormEntity(BaseModel):
    Attributes: Optional[RxNormAttributeList] = None
    BeginOffset: Optional[Integer] = None
    Category: Optional[RxNormEntityCategory] = None
    EndOffset: Optional[Integer] = None
    Id: Optional[Integer] = None
    RxNormConcepts: Optional[RxNormConceptList] = None
    Score: Optional[Float] = None
    Text: Optional[OntologyLinkingBoundedLengthString] = None
    Traits: Optional[RxNormTraitList] = None
    Type: Optional[RxNormEntityType] = None


class RxNormEntityList(RootModel[List[RxNormEntity]]):
    root: List[RxNormEntity]


class SNOMEDCTAttribute(BaseModel):
    BeginOffset: Optional[Integer] = None
    Category: Optional[SNOMEDCTEntityCategory] = None
    EndOffset: Optional[Integer] = None
    Id: Optional[Integer] = None
    RelationshipScore: Optional[Float] = None
    RelationshipType: Optional[SNOMEDCTRelationshipType] = None
    SNOMEDCTConcepts: Optional[SNOMEDCTConceptList] = None
    Score: Optional[Float] = None
    Text: Optional[String] = None
    Traits: Optional[SNOMEDCTTraitList] = None
    Type: Optional[SNOMEDCTAttributeType] = None


class SNOMEDCTAttributeList(RootModel[List[SNOMEDCTAttribute]]):
    root: List[SNOMEDCTAttribute]


class SNOMEDCTEntity(BaseModel):
    Attributes: Optional[SNOMEDCTAttributeList] = None
    BeginOffset: Optional[Integer] = None
    Category: Optional[SNOMEDCTEntityCategory] = None
    EndOffset: Optional[Integer] = None
    Id: Optional[Integer] = None
    SNOMEDCTConcepts: Optional[SNOMEDCTConceptList] = None
    Score: Optional[Float] = None
    Text: Optional[OntologyLinkingBoundedLengthString] = None
    Traits: Optional[SNOMEDCTTraitList] = None
    Type: Optional[SNOMEDCTEntityType] = None


class SNOMEDCTEntityList(RootModel[List[SNOMEDCTEntity]]):
    root: List[SNOMEDCTEntity]


class InferRxNormResponse(BaseModel):
    Entities: RxNormEntityList
    ModelVersion: Optional[String] = None
    PaginationToken: Optional[String] = None


class InferSNOMEDCTResponse(BaseModel):
    Characters_1: Optional[Characters] = Field(None, alias='Characters')
    Entities: SNOMEDCTEntityList
    ModelVersion: Optional[String] = None
    PaginationToken: Optional[String] = None
    SNOMEDCTDetails_1: Optional[SNOMEDCTDetails] = Field(None, alias='SNOMEDCTDetails')
